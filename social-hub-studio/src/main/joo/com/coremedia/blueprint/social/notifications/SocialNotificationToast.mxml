<?xml version="1.0" encoding="UTF-8"?>
<ui:AnimatedNotification xmlns:fx="http://ns.adobe.com/mxml/2009"
                         xmlns="exml:ext.config"
                         xmlns:ui="exml:com.coremedia.ui.config"
                         xmlns:editor="com.coremedia.ui.plugins.*"
                         position="lt"
                         yOffset="4"
                         xOffset="37"
                         target="actions-toolbar"
                         isMouseAware="true"
                         hideAnchor="true"
                         minHeight="60"
                         closable="true"
                         header="{false}"
                         bodyStyle="padding: 0px;"
                         style="padding:0px;"
                         width="400">
  <fx:Metadata>
    [ResourceBundle('com.coremedia.icons.CoreIcons')]
  </fx:Metadata>
  <fx:Script><![CDATA[
    import com.coremedia.ui.data.ValueExpressionFactory;
    import com.coremedia.ui.mixins.ValidationState;
    import com.coremedia.ui.skins.ButtonSkin;
    import com.coremedia.ui.skins.ContainerSkin;
    import com.coremedia.ui.skins.DisplayFieldSkin;

    import mx.resources.ResourceManager;

    public static const xtype:String = "com.coremedia.blueprint.social.studio.config.socialNotificationToast";

    private var config:SocialNotificationToast;


    [ExtConfig]
    public var notificationMessage:String;

    [ExtConfig]
    public var notificationSource:String;

    [ExtConfig]
    public var notificationActionLabel:String;

    [ExtConfig]
    public var notificationAction:Function;

    [ExtConfig]
    public var notificationTitle:String;

    [ExtConfig]
    public var notificationValidationState:ValidationState;

    public native function SocialNotificationToast(config:SocialNotificationToast = null);

    private static function getStatusColor(state:ValidationState):String {
      if(state === ValidationState.ERROR) {
        return "#c41313";
      }
      if(state === ValidationState.WARNING) {
        return "#ed9b03";
      }
      if(state === ValidationState.SUCCESS) {
        return "#4d8735";
      }

      return "#8a8686";
    }

    private static function getStatusIcon(state:ValidationState):String {
      if(state === ValidationState.ERROR) {
        return "error";
      }
      if(state === ValidationState.WARNING) {
        return "warning";
      }
      if(state === ValidationState.SUCCESS) {
        return "approve";
      }

      return null;
    }

    private function callNotificationAction():void {
      this.destroy();
      notificationAction();
    }

    ]]></fx:Script>

  <ui:items>
    <Box width="6" style="background-color:{getStatusColor(config.notificationValidationState)};" />
    <Container width="32">
      <items>
        <ui:IconDisplayField iconCls="{resourceManager.getString('com.coremedia.icons.CoreIcons', getStatusIcon(config.notificationValidationState))}"
                             style="padding-top:12px;padding-left:12px;"/>
      </items>
      <plugins>
        <editor:BindVisibilityPlugin bindTo="{ValueExpressionFactory.createFromValue(config.notificationValidationState !== null)}" />
      </plugins>
      <layout>
        <layout_VBox align="stretch" />
      </layout>
    </Container>
    <Container ui="{ContainerSkin.GRID_200.getSkin()}" flex="1">
      <items>
        <Container flex="1">
          <items>
            <Container height="20">
              <items>
                <DisplayField ui="{DisplayFieldSkin.BOLD.getSkin()}" value="{config.notificationSource + ':'}"/>
                <Container width="4"/>
                <DisplayField value="{config.notificationTitle}"/>
              </items>
              <layout>
                <layout_HBox align="stretch"/>
              </layout>
            </Container>
            <DisplayField html="true" style="color:#646060 !important;padding-top:8px;" ui="{null}"
                          flex="1"
                          value="{config.notificationMessage}"/>
            <Container style="padding-top:12px;">
              <items>
                <Button itemId="actionButton"
                        ui="{ButtonSkin.MATERIAL_SECONDARY.getSkin()}"
                        ariaLabel="{config.notificationActionLabel}"
                        text="{config.notificationActionLabel || resourceManager.getString('com.coremedia.blueprint.social.SocialHub', 'notification_default_action_label')}"
                        handler="{callNotificationAction}">
                </Button>
              </items>
              <plugins>
                <ui:BindVisibilityPlugin
                        bindTo="{ValueExpressionFactory.createFromValue(config.notificationAction)}"/>
              </plugins>
              <layout>
                <layout_HBox align="stretch" pack="end" />
              </layout>
            </Container>
          </items>
          <layout>
            <layout_VBox align="stretch"/>
          </layout>
        </Container>
      </items>
      <layout>
        <layout_HBox align="stretch"/>
      </layout>
    </Container>
    <Container width="32">
      <items>
        <ui:IconButton
                iconCls="{ResourceManager.getInstance().getString('com.coremedia.icons.CoreIcons', 'remove_small')}"
                handler="{this.destroy}"
                ui="{ButtonSkin.DEFAULT.getSkin()}"/>
      </items>
      <layout>
        <layout_VBox align="stretch"/>
      </layout>
    </Container>
  </ui:items>

  <ui:layout>
    <layout_HBox align="stretch"/>
  </ui:layout>

</ui:AnimatedNotification>
